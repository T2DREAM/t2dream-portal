{"author":{"name":"Scott Sauyet","email":"scott@sauyet.com","url":"scott.sauyet.com"},"contributors":[{"name":"Michael Hurley","email":"mh@buzzdecafe.com","url":"http://buzzdecafe.com"},{"name":"Scott Sauyet","email":"scott@sauyet.com","url":"http://fr.umio.us"},{"name":"David Chambers","email":"dc@davidchambers.me","url":"http://davidchambers.me"},{"name":"Graeme Yeates","email":"yeatesgraeme@gmail.com","url":"https://github.com/megawac"}],"name":"ramda","description":"A practical functional library for JavaScript programmers.","version":"0.21.0","homepage":"http://ramdajs.com/","license":"MIT","repository":{"type":"git","url":"git://github.com/ramda/ramda.git"},"main":"dist/ramda.js","scripts":{"bench":"scripts/benchRunner","bookmarklet":"scripts/bookmarklet","build":"make && make dist/ramda.min.js","clean":"rimraf dist/* coverage/*","precoverage":"npm run pretest","coverage":"istanbul cover node_modules/.bin/_mocha -- --reporter spec","postcoverage":"npm run posttest","lint":"eslint scripts/bookmarklet scripts/build src/*.js src/internal/*.js test/*.js test/**/*.js lib/sauce/*.js lib/bench/*.js","pretest":"npm install && npm run lint && npm run clean && npm run build","test":"mocha --reporter spec","posttest":"git checkout -- dist","prebrowser_test":"npm run pretest","browser_test":"testem ci","postbrowser_test":"npm run posttest"},"dependencies":{},"devDependencies":{"acorn":"0.9.x","benchmark":"~1.0.0","browserify":"10.x.x","cli-table":"0.3.x","commander":"2.5.x","dox":"latest","envvar":"1.x.x","escodegen":"1.4.x","eslint":"^1.10.1","handlebars":"3.0.x","istanbul":"^0.4.x","js-yaml":"^3.2.5","mocha":"2.x.x","q":"^1.1.1","ramda":"0.17.x","rimraf":"~2.3.2","sanctuary":"0.7.x","testem":"0.9.x","uglify-js":"2.4.x","xyz":"0.5.x"},"readme":"Ramda\n=============\n\nA practical functional library for Javascript programmers.\n\n[![Build Status](https://travis-ci.org/ramda/ramda.svg?branch=master)](https://travis-ci.org/ramda/ramda)\n[![npm module](https://badge.fury.io/js/ramda.svg)](https://www.npmjs.org/package/ramda)\n[![dependencies](https://david-dm.org/ramda/ramda.svg)](https://david-dm.org/ramda/ramda)\n[![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/ramda/ramda?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n\nWhy Ramda?\n----------\n\n<img src=\"http://ramda.jcphillipps.com/logo/ramdaFilled_200x235.png\" \n     width=\"170\" height=\"190\" align=\"right\" hspace=\"12\" />\n\nThere are already several excellent libraries with a functional flavor. Typically, they are meant to be general-purpose toolkits, suitable for working in multiple paradigms. Ramda has a more focused goal. We wanted a library designed specifically for a functional programming style, one that makes it easy to create functional pipelines, one that never mutates user data. \n\n\nWhat's Different?\n-----------------\n\nThe primary distinguishing features of Ramda are:\n\n* Ramda emphasizes a purer functional style. Immutability and side-effect free functions \n  are at the heart of its design philosophy. This can help you get the job done with simple, \n  elegant code.\n\n* Ramda functions are automatically curried. This allows you to easily build up new functions \n  from old ones simply by not supplying the final parameters.\n\n* The parameters to Ramda functions are arranged to make it convenient for currying. The data \n  to be operated on is generally supplied last.\n\nThe last two points together make it very easy to build functions as sequences of simpler functions, each of which transforms the data and passes it along to the next. Ramda is designed to support this style of coding.\n\n\n\nAlso see [Why Ramda?](http://fr.umio.us/why-ramda/), [Why Curry Helps](https://web.archive.org/web/20140714014530/http://hughfdjackson.com/javascript/why-curry-helps) and [Hey Underscore, You're Doing It Wrong!](https://www.youtube.com/watch?v=m3svKOdZijA&app=desktop).\n\n\nPhilosophy\n----------\nUsing Ramda should feel much like just using Javascript.\nIt is practical, functional Javascript. We're not introducing\nlambda expressions in strings, we're not borrowing consed \nlists, we're not porting over all of the Clojure functions.\n\nOur basic data structures are plain Javascript objects, and our\nusual collections are Javascript arrays. We also keep other\nnative features of Javascript, such as functions as objects\nwith properties.\n\nFunctional programming is in good part about immutable objects and \nside-effect free functions. While Ramda does not *enforce* this, it\nenables such style to be as frictionless as possible.\n\nWe aim for an implementation both clean and elegant, but the API is king.\nWe sacrifice a great deal of implementation elegance for even a slightly\ncleaner API.\n\nLast but not least, Ramda strives for performance. A reliable and quick\nimplementation wins over any notions of functional purity.\n\nInstallation\n------------\n\nTo use with node:\n\n```bash\n$ npm install ramda\n```\n\nThen in the console:\n\n```javascript\nvar R = require('ramda');\n```\n\nTo use directly in the browser:\n\n```html\n<script src=\"path/to/yourCopyOf/ramda.js\"></script>\n```\n\nor the minified version:\n\n```html\n<script src=\"path/to/yourCopyOf/ramda.min.js\"></script>\n```\n\nor from a CDN, either cdnjs:\n\n```html\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/ramda/ramda.min.js\"/\"ramda.min.js\"/\"ramda.min.js\"/\"0.21/ramda.min.js\"/ramda.min.js\".1/ramda.min.js\"/ramda.min.js\"></script>\n```\n\nor one of the below links from [jsDelivr](http://jsdelivr.com):\n\n```html\n<script src=\"//cdn.jsdelivr.net/ramda/ramda.min.js\"/\"ramda.min.js\"/\"ramda.min.js\"/\"0.21/ramda.min.js\"/ramda.min.js\".1/ramda.min.js\"/ramda.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/ramda/ramda.min.js\"/\"ramda.min.js\"/\"0.21/ramda.min.js\"/ramda.min.js\"/ramda.min.js\"></script>\n<script src=\"//cdn.jsdelivr.net/ramda/latest/ramda.min.js\"></script>\n```\n\n(note that using `latest` is taking a significant risk that ramda API changes could break your code.)\n\nThese script tags add the variable `R` on the browser's global scope.\n\nOr you can inject ramda into virtually any unsuspecting website using [the bookmarklet](BOOKMARKLET.md).\n\n### Build\n\n* on Unix-based platforms, `npm run build` updates __dist/ramda.js__ and __dist/ramda.min.js__\n* on Windows, write the output of `scripts/build --complete` to a temporary file, then rename the temporary file __dist/ramda.js__.\n\n#### Partial Builds\n\nIt is possible to build Ramda with a subset of the functionality to reduce its file size. Ramda's build system supports this with command line flags. For example if you're using `R.compose`, `R.reduce`, and `R.filter` you can create a partial build with:\n\n    ./scripts/build -- src/compose.js src/reduce.js src/filter.js > dist/ramda.custom.js\n\nThis requires having Node/io.js installed. \n\nDocumentation\n-------------\n\nPlease review the [API documentation](http://ramdajs.com/docs/).\n\n\n\nIntroductions\n-------------\n\n* [Introducing Ramda](http://buzzdecafe.github.io/code/2014/05/16/introducing-ramda) by Buzz de Cafe\n* [Why Ramda?](http://fr.umio.us/why-ramda/) by Scott Sauyet\n* [Favoring Curry](http://fr.umio.us/favoring-curry/) by Scott Sauyet\n\n\n\nThe Name\n--------\n\nOk, so we like sheep.  That's all.  It's a short name, not already \ntaken.  It could as easily have been `eweda`, but then we would be \nforced to say _eweda lamb!_, and no one wants that.  For non-English \nspeakers, lambs are baby sheep, ewes are female sheep, and rams are male \nsheep.  So perhaps ramda is a grown-up lambda... but probably not.\n\n\n\n\nRunning The Test Suite\n----------------------\n\n**Console:**\n\nTo run the test suite from the console, you need to have `mocha` installed:\n\n    npm install -g mocha\n\nThen from the root of the project, you can just call\n\n    mocha\n\nAlternately, if you've installed the dependencies, via:\n\n    npm install\n\nthen you can run the tests (and get detailed output) by running:\n\n    npm test\n\n**Browser:**\n\nTo run the test suite in the browser, you can simply open `test/index.html`.\n\nAlternatively, you can use [testem](https://github.com/airportyh/testem) to\ntest across different browsers (or even headlessly), with livereloading of\ntests too. Install testem (`npm install -g testem`) and run `testem`. Open the\nlink provided in your browser and you will see the results in your terminal.\n\nIf you have _PhantomJS_ installed, you can run `testem -l phantomjs` to run the\ntests completely headlessly.\n\n\n\n\nAcknowledgements\n-----------------\n\nThanks to [J. C. Phillipps](http://www.jcphillipps.com) for the Ramda logo.\nRamda logo artwork &copy; 2014 J. C. Phillipps. Licensed Creative Commons \n[CC BY-NC-SA 3.0](http://creativecommons.org/licenses/by-nc-sa/3.0/).\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/ramda/ramda/issues"},"_id":"ramda@0.21.0","_shasum":"a001abedb3ff61077d4ff1d577d44de77e8d0a35","_resolved":"https://registry.npmjs.org/ramda/-/ramda-0.21.0.tgz","_from":"https://registry.npmjs.org/ramda/-/ramda-0.21.0.tgz"}