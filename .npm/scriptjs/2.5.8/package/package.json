{"name":"scriptjs","description":"Asyncronous JavaScript loader and dependency manager","keywords":["ender","script","dependency","ajax","jsonp","loader"],"version":"2.5.8","homepage":"https://github.com/ded/script.js","author":{"name":"Dustin Diaz","email":"dustin@dustindiaz.com","url":"http://dustindiaz.com"},"contributors":[{"name":"Jacob Thornton","email":"jacob@twitter.com","url":"https://github.com/fat"}],"main":"./dist/script.js","ender":"./src/ender.js","repository":{"type":"git","url":"git+https://github.com/ded/script.js.git"},"devDependencies":{"sink-test":"*","domready":"*","smoosh":"*"},"readme":"### $script.js - Async JavaScript loader & dependency manager\n\n`$script.js` is an asynchronous JavaScript loader and dependency manager with an astonishingly impressive lightweight footprint. Like many other script loaders, $script.js allows you to load script resources on-demand from any URL and not block other resources from loading (like CSS and images). Furthermore, it's unique interface allows developers to work easily with even the most complicated dependencies, which can often be the case for large, complex web applications.\n\n### Browser Support\n\n  * IE 6+\n  * Opera 10+\n  * Safari 3+\n  * Chrome 1+\n  * Firefox 2+\n\n### Examples\n\n\nold school - blocks CSS, Images, AND JS!\n\n``` html\n<script src=\"jquery.js\"></script>\n<script src=\"my-jquery-plugin.js\"></script>\n<script src=\"my-app-that-uses-plugin.js\"></script>\n```\n\nmiddle school - loads as non-blocking, but has multiple dependents\n\n``` js\n$script('jquery.js', function () {\n  $script('my-jquery-plugin.js', function () {\n    $script('my-app-that-uses-plugin.js')\n  })\n})\n```\n\nnew school - loads as non-blocking, and ALL js files load asynchronously\n\n``` js\n// load jquery and plugin at the same time. name it 'bundle'\n$script(['jquery.js', 'my-jquery-plugin.js'], 'bundle')\n\n// load your usage\n$script('my-app-that-uses-plugin.js')\n\n\n/*--- in my-jquery-plugin.js ---*/\n$script.ready('bundle', function() {\n  // jquery & plugin (this file) are both ready\n  // plugin code...\n})\n\n\n/*--- in my-app-that-uses-plugin.js ---*/\n$script.ready('bundle', function() {\n  // use your plugin :)\n})\n```\n\n### Exhaustive list of ways to use $script.js\n\n``` js\n$script('foo.js', function() {\n  // foo.js is ready\n})\n\n\n$script(['foo.js', 'bar.js'], function() {\n  // foo.js & bar.js is ready\n})\n\n\n$script(['foo.js', 'bar.js'], 'bundle')\n$script.ready('bundle', function() {\n  // foo.js & bar.js is ready\n})\n\n// create an id and callback inline\n$script(['foo.js', 'bar.js'], 'bundle', function () {\n  // foo.js & bar.js is ready\n})\n\n\n$script('foo.js', 'foo')\n$script('bar.js', 'bar')\n$script\n  .ready('foo', function() {\n    // foo.js is ready\n  })\n  .ready('bar', function() {\n    // bar.js is ready\n  })\n\n\nvar dependencyList = {\n    foo: 'foo.js'\n  , bar: 'bar.js'\n  , thunk: ['thunkor.js', 'thunky.js']\n}\n\n$script('foo.js', 'foo')\n$script('bar.js', 'bar')\n\n// wait for multiple depdendencies!\n$script.ready(['foo', 'bar', 'thunk'], function () {\n  // foo.js & bar.js & thunkor.js & thunky.js is ready\n}, function(depsNotFound) {\n    // foo.js & bar.js may have downloaded\n    // but ['thunk'] dependency was never found\n    // so lazy load it now\n    depsNotFound.forEach(function(dep) {\n      $script(dependencyList[dep], dep)\n    })\n  })\n\n\n// in my-awesome-plugin.js\n$script.ready('jquery', function() {\n  //define awesome jquery plugin here\n  $script.done('my-awesome-plugin')\n})\n\n// in index.html\n$script('jquery.js', 'jquery')\n$script('my-awesome-plugin.js')\n$script.ready('my-awesome-plugin', function() {\n  //run code here when jquery and my awesome plugin are both ready\n})\n```\n\n### $script.path()\n\nOptionally to make working with large projects easier, there is a path variable you can set to set as a base.\n\n``` js\n$script.path('/js/modules/')\n$script(['dom', 'event'], function () {\n  // use dom & event\n});\n```\n\nNote that this will include all scripts from here on out with the base path. If you wish to circumvent this for any single script, you can simply call <code>$script.get()</code>\n\n``` js\n$script.path('/js/modules/')\n$script(['dom', 'event'], function () {\n  // use dom & event\n})\n\n$script.get('http://example.com/base.js', function () {\n\n})\n```\n\n### $script.urlArgs()\nAs of 2.5.5 it's possible to concat URL arguments (i.e. a query string) to the script path.\nThis is especially useful when you're in need of a cachebuster and works as follows:\n\n```js\n$script.urlArgs('key=value&foo=bar');\n``` \n\nPlease note that Squid, a popular proxy, doesn’t cache resources with a querystring. This hurts performance when multiple users behind a proxy cache request the same file – rather than using the cached version everybody would have to send a request to the origin server. So ideally, [as Steve Souders points out](http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/), you should rev the filename itself.\n\n### Developers\n\nBuilding a $script environment works like this:\n\n``` sh\nnpm install -dev\nmake\n```\n\n### Ender support\n\nYou can add `$script` to your existing [ender](http://enderjs.com) build by adding it as such:\n\n``` sh\nender add scriptjs\n```\n\nGet access to it as such:\n\n``` js\n$.require(...)\n```\n\nYou can also require it as such:\n\n``` js\nvar $S = require('scriptjs')\n\n$S('/foo.js', function () {\n  // foo is ready\n})\n```\n\n### Giving back\nAre you using this library in production? Consider [leaving a tip](https://www.gittip.com/ded) to show your appreciation.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/ded/script.js/issues"},"_id":"scriptjs@2.5.8","_shasum":"d0c43955c2e6bad33b6e4edf7b53b8965aa7ca5f","_resolved":"https://registry.npmjs.org/scriptjs/-/scriptjs-2.5.8.tgz","_from":"https://registry.npmjs.org/scriptjs/-/scriptjs-2.5.8.tgz"}