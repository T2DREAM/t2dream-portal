{"name":"string-replace-loader","version":"1.2.0","description":"Replace loader for Webpack","keywords":["webpack","loader","webpack-loader","replace","string-replace","regex-replace"],"scripts":{"test":"mocha"},"main":"index.js","dependencies":{"loader-utils":"^1.1.0","lodash":"^4"},"devDependencies":{"chai":"^3.2.0","mocha":"^2.3.2","webpack":"1 || 2"},"peerDependencies":{"webpack":"1 || 2"},"repository":{"type":"git","url":"git+https://github.com/Va1/string-replace-loader.git"},"homepage":"https://github.com/Va1/string-replace-loader","author":{"name":"Valentyn Barmashyn","email":"valpreacher@gmail.com"},"license":"MIT","private":false,"readme":"# Replace loader for [Webpack](http://webpack.github.io/)\n\nPerform replacements (plain and regular expression) in the contents loaded by the loader.\n\n## Install:\n\n```bash\n$ npm install --save-dev string-replace-loader\n```\n\n## Usage:\n\nIn general, loader allows to perform replacements in a way [String.prototype.replace()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace) does (loader uses it internally). For instance, it means that if you want to replace all occurences, you should use RegExp in `query.search` with `g` flag in `query.flags`, etc.\n\n### Plain replacement:\n\nIn your `webpack.config.js`:\n\n```javascript\nmodule.exports = {\n  // ...\n  module: {\n    loaders: [\n      {\n        test: /fileInWhichJQueryIsUndefined\\.js$/,\n        loader: 'string-replace',\n        query: {\n          search: 'jQuery',\n          replace: 'window.$'\n        }\n      }\n    ]\n  }\n}\n```\n\n### RegEx replacement:\n\nTo achieve regular expression replacement you should specify the `flags` query param\n(as an empty string if you do not want any flags). In this case, `search` and `flags` are being\npassed to the [RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) constructor.\n\nIn your `webpack.config.js`:\n\n```javascript\nmodule.exports = {\n  // ...\n  module: {\n    loaders: [\n      {\n        test: /fileInWhichJQueryIsUndefined\\.js$/,\n        loader: 'string-replace',\n        query: {\n          search: 'jquery',\n          replace: 'window.$',\n          flags: 'i'\n        }\n      }\n    ]\n  }\n}\n```\n\n### Multiple replacement:\n\nAlso, you can pass an array of search-replace pairs this way:\n\nIn your `webpack.config.js`:\n\n```javascript\nmodule.exports = {\n  // ...\n  module: {\n    loaders: [\n      {\n        test: /\\.js$/,\n        loader: 'string-replace',\n        query: {\n          multiple: [\n             { search: 'jQuery', replace: 'window.$' },\n             { search: '_', replace: 'window.lodash' }\n          ]\n        }\n      }\n    ]\n  }\n}\n```\n\n### Strict mode replacement:\n\nYou can set strict mode to ensure that the replacement was done:\n\nIn your `webpack.config.js`:\n\n```javascript\nmodule.exports = {\n  // ...\n  module: {\n    loaders: [\n      {\n        test: /fileInWhichJQueryIsUndefined\\.js$/,\n        loader: 'string-replace',\n        query: {\n          search: 'jQuery',\n          replace: 'window.$',\n          strict: true\n        }\n      }\n    ]\n  }\n}\n```\n\n## Contributing:\n\nFeel free to open issues to propose stuff and participate. Pull requests are also welcome.\n\n## Licence:\n\n[MIT](http://en.wikipedia.org/wiki/MIT_License)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/Va1/string-replace-loader/issues"},"_id":"string-replace-loader@1.2.0","_shasum":"31752d230584e70037a80fb50ff39c221be326c9","_resolved":"https://registry.npmjs.org/string-replace-loader/-/string-replace-loader-1.2.0.tgz","_from":"https://registry.npmjs.org/string-replace-loader/-/string-replace-loader-1.2.0.tgz"}